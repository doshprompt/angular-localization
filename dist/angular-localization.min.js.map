{"version":3,"sources":["angular-localization.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","isToken","str","length","TOKEN_REGEX","test","getPath","tok","path","split","result","slice","join","getKey","getBundle","i","bundles","isFrozen","obj","Object","$$frozen","freeze","loadBundle","token","parent","ref","root","locale","currentLocale","url","basePath","extend","_loading","fileExtension","get","success","data","key","hasOwnProperty","$broadcast","resourceUpdates","bundle","deferrences","resolve","error","err","reject","bundleReady","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","push","all","applySubstitutions","text","subs","res","firstOfKind","sub","replace","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","updateHtmlTagLangAttr","lang","$html","attr","getLanguageSupported","language","foundLanguage","languageSuppported","fallbackLang","isUndefined","defaultLocale","setLocale","trim","localeChanges","cookieStore","put","cookieName","getLocale","getPreferredBrowserLanguage","nav","navigator","browserLanguagePropertyKeys","languages","initialSetLocale","validTokens","RegExp","element","body","persistSelection","has","getString","filter","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","normAttr","observableAttrs","i18n","$on","elem","updateText","target","attributes","exp","values","$eval","langFiles","lastValues","$set","$normalize","i18nAttr","sharedDictionary","this"],"mappings":"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","file":"angular-localization.min.js","sourcesContent":["/*!\n * angular-localization :: v1.4.1 :: 2016-01-29\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2016 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\r\n    'use strict';\r\n\nangular.module('ngLocalize.Version', [])\r\n    .constant('localeVer', '1.4.1');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\r\n\nangular.module('ngLocalize.InstalledLanguages', [])\r\n    .value('localeSupported', [\r\n        'en-US'\r\n    ])\r\n    .value('localeFallbacks', {\r\n        'en': 'en-US'\r\n    });\nangular.module('ngLocalize')\r\n    .service('locale', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\r\n        var TOKEN_REGEX = localeConf.validTokens || new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$'),\r\n            $html = angular.element(document.body).parent(),\r\n            currentLocale,\r\n            deferrences,\r\n            bundles,\r\n            cookieStore;\r\n\r\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\r\n            cookieStore = $injector.get('$cookieStore');\r\n        }\r\n\r\n        function isToken(str) {\r\n            return (str && str.length && TOKEN_REGEX.test(str));\r\n        }\r\n\r\n        function getPath(tok) {\r\n            var path = tok ? tok.split('.') : '',\r\n                result = '';\r\n\r\n            if (path.length > 1) {\r\n                result = path.slice(0, -1).join('.');\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getKey(tok) {\r\n            var path = tok ? tok.split('.') : [],\r\n                result = '';\r\n\r\n            if (path.length) {\r\n                result = path[path.length - 1];\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getBundle(tok) {\r\n            var result = null,\r\n                path = tok ? tok.split('.') : [],\r\n                i;\r\n\r\n            if (path.length > 1) {\r\n                result = bundles;\r\n\r\n                for (i = 0; i < path.length - 1; i++) {\r\n                    if (result[path[i]]) {\r\n                        result = result[path[i]];\r\n                    } else {\r\n                        result = null;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function isFrozen (obj) {\r\n            return (Object.isFrozen || function (obj) {\r\n                return obj && obj.$$frozen;\r\n            })(obj);\r\n        }\r\n\r\n        function freeze (obj) {\r\n            return (Object.freeze || function (obj) {\r\n                if (obj) {\r\n                    obj.$$frozen = true;\r\n                }\r\n            })(obj);\r\n        }\r\n\r\n        function loadBundle(token) {\r\n            var path = token ? token.split('.') : '',\r\n                root = bundles,\r\n                parent,\r\n                locale = currentLocale,\r\n                url = localeConf.basePath + '/' + locale,\r\n                ref,\r\n                i;\r\n\r\n            if (path.length > 1) {\r\n                for (i = 0; i < path.length - 1; i++) {\r\n                    ref = path[i];\r\n                    if (!root[ref]) {\r\n                        root[ref] = {};\r\n                    }\r\n                    parent = root;\r\n                    root = root[ref];\r\n                    url += '/' + ref;\r\n                }\r\n\r\n                if (isFrozen(root)) {\r\n                    root = angular.extend({}, root);\r\n                }\r\n                if (!root._loading) {\r\n                    root._loading = true;\r\n\r\n                    url += localeConf.fileExtension;\r\n\r\n                    $http.get(url)\r\n                        .success(function (data) {\r\n                            var key,\r\n                                path = getPath(token);\r\n                            // Merge the contents of the obtained data into the stored bundle.\r\n                            for (key in data) {\r\n                                if (data.hasOwnProperty(key)) {\r\n                                    root[key] = data[key];\r\n                                }\r\n                            }\r\n\r\n                            // Mark the bundle as having been \"loaded\".\r\n                            delete root._loading;\r\n                            parent[ref] = freeze(root);\r\n                            root = null;\r\n\r\n                            // Notify anyone who cares to know about this event.\r\n                            $rootScope.$broadcast(localeEvents.resourceUpdates, {\r\n                                locale: locale,\r\n                                path: path,\r\n                                bundle: parent[ref]\r\n                            });\r\n\r\n                            // If we issued a Promise for this file, resolve it now.\r\n                            if (deferrences[path]) {\r\n                                deferrences[path].resolve(path);\r\n                            }\r\n                        })\r\n                        .error(function (err) {\r\n                            var path = getPath(token);\r\n\r\n                            $log.error('[localizationService] Failed to load: ' + url);\r\n\r\n                            // We can try it again later.\r\n                            delete root._loading;\r\n\r\n                            // If we issued a Promise for this file, reject it now.\r\n                            if (deferrences[path]) {\r\n                                deferrences[path].reject(err);\r\n                            }\r\n                        });\r\n                }\r\n            }\r\n        }\r\n\r\n        function bundleReady(path) {\r\n            var bundle,\r\n                token;\r\n\r\n            path = path || localeConf.langFile;\r\n            token = path + '._LOOKUP_';\r\n\r\n            bundle = getBundle(token);\r\n\r\n            if (!deferrences[path]) {\r\n                deferrences[path] = $q.defer();\r\n            }\r\n\r\n            if (bundle && !bundle._loading) {\r\n                deferrences[path].resolve(path);\r\n            } else {\r\n                if (!bundle) {\r\n                    loadBundle(token);\r\n                }\r\n            }\r\n\r\n            return deferrences[path].promise;\r\n        }\r\n\r\n        function ready(path) {\r\n            var paths,\r\n                deferred,\r\n                outstanding;\r\n\r\n            if (angular.isString(path)) {\r\n                paths = path.split(',');\r\n            } else if (angular.isArray(path)) {\r\n                paths = path;\r\n            } else {\r\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\r\n            }\r\n\r\n            if (paths.length > 1) {\r\n                outstanding = [];\r\n                paths.forEach(function (path) {\r\n                    outstanding.push(bundleReady(path));\r\n                });\r\n                deferred = $q.all(outstanding);\r\n            } else {\r\n                deferred = bundleReady(path);\r\n            }\r\n\r\n            return deferred;\r\n        }\r\n\r\n        function applySubstitutions(text, subs) {\r\n            var res = text,\r\n                firstOfKind = 0;\r\n\r\n            if (subs) {\r\n                if (angular.isArray(subs)) {\r\n                    angular.forEach(subs, function (sub, i) {\r\n                        res = res.replace('%' + (i + 1), sub);\r\n                        res = res.replace('{' + (i + 1) + '}', sub);\r\n                    });\r\n                } else {\r\n                    angular.forEach(subs, function (v, k) {\r\n                        ++firstOfKind;\r\n\r\n                        res = res.replace('{' + k + '}', v);\r\n                        res = res.replace('%' + k, v);\r\n                        res = res.replace('%' + (firstOfKind), v);\r\n                        res = res.replace('{' + (firstOfKind) + '}', v);\r\n                    });\r\n                }\r\n            }\r\n            res = res.replace(/\\n/g, '<br>');\r\n\r\n            return res;\r\n        }\r\n\r\n        function getLocalizedString(txt, subs) {\r\n            var result = '',\r\n                bundle,\r\n                key,\r\n                A,\r\n                isValidToken = false;\r\n\r\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\r\n                A = txt.split(localeConf.delimiter);\r\n                txt = A[0];\r\n                subs = angular.fromJson(A[1]);\r\n            }\r\n\r\n            isValidToken = isToken(txt);\r\n            if (isValidToken) {\r\n                if (!angular.isObject(subs)) {\r\n                    subs = [subs];\r\n                }\r\n\r\n                bundle = getBundle(txt);\r\n                if (bundle && !bundle._loading) {\r\n                    key = getKey(txt);\r\n\r\n                    if (bundle[key]) {\r\n                        result = applySubstitutions(bundle[key], subs);\r\n                    } else {\r\n                        $log.info('[localizationService] Key not found: ' + txt);\r\n                        result = '%%KEY_NOT_FOUND%%';\r\n                    }\r\n                } else {\r\n                    if (!bundle) {\r\n                        loadBundle(txt);\r\n                    }\r\n                }\r\n            } else {\r\n                result = txt;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function updateHtmlTagLangAttr(lang) {\r\n            lang = lang.split('-')[0];\r\n\r\n            $html.attr('lang', lang);\r\n        }\r\n\r\n        function getLanguageSupported(language) {\r\n            var foundLanguage = null;\r\n            if (language && language.length) {\r\n                localeSupported.forEach(function (languageSuppported) {\r\n                    if (languageSuppported.indexOf(language) === 0) {\r\n                        foundLanguage = localeSupported.indexOf(languageSuppported);\r\n                        return;\r\n                    }\r\n                });\r\n                if (!foundLanguage) {\r\n                    var fallbackLang = localeFallbacks[language.split('-')[0]];\r\n                    if (!angular.isUndefined(fallbackLang)) {\r\n                      foundLanguage = fallbackLang;\r\n                    }\r\n                }\r\n            }\r\n            return foundLanguage || localeConf.defaultLocale;\r\n        }\r\n\r\n        function setLocale(value) {\r\n            var lang;\r\n\r\n            if (angular.isString(value) && value.length ) {\r\n                value = value.trim();\r\n                lang = getLanguageSupported(value);\r\n            } else {\r\n                lang = localeConf.defaultLocale;\r\n            }\r\n\r\n            if (lang !== currentLocale) {\r\n                bundles = {};\r\n                deferrences = {};\r\n                currentLocale = lang;\r\n\r\n                updateHtmlTagLangAttr(lang);\r\n\r\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\r\n\r\n                if (cookieStore) {\r\n                    cookieStore.put(localeConf.cookieName, lang);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getLocale() {\r\n            return currentLocale;\r\n        }\r\n\r\n        function getPreferredBrowserLanguage() {\r\n            var nav = $window.navigator,\r\n                browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],\r\n                i,\r\n                language;\r\n\r\n            // support for HTML 5.1 \"navigator.languages\"\r\n            if (angular.isArray(nav.languages)) {\r\n                for (i = 0; i < nav.languages.length; i++) {\r\n                    language = nav.languages[i];\r\n                    if (language) {\r\n                        return language;\r\n                    }\r\n                }\r\n            }\r\n            // support for other well known properties in browsers\r\n            for (i = 0; i < browserLanguagePropertyKeys.length; i++) {\r\n                language = nav[browserLanguagePropertyKeys[i]];\r\n                if (language) {\r\n                    return language;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function initialSetLocale() {\r\n            setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ?\r\n                cookieStore.get(localeConf.cookieName) :\r\n                getPreferredBrowserLanguage());\r\n        }\r\n\r\n        initialSetLocale();\r\n\r\n        return {\r\n            ready: ready,\r\n            isToken: isToken,\r\n            getPath: getPath,\r\n            getKey: getKey,\r\n            setLocale: setLocale,\r\n            getLocale: getLocale,\r\n            getString: getLocalizedString,\r\n            getPreferredBrowserLanguage: getPreferredBrowserLanguage\r\n        };\r\n    });\r\n\nangular.module('ngLocalize')\r\n    .filter('i18n', function (locale) {\r\n        var i18nFilter = function (input, args) {\r\n            return locale.getString(input, args);\r\n        };\r\n\r\n        i18nFilter.$stateful = true;\r\n\r\n        return i18nFilter;\r\n    });\r\n\nangular.module('ngLocalize.Events', [])\r\n    .constant('localeEvents', {\r\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\r\n        localeChanges: 'ngLocalizeLocaleChanged'\r\n    });\nangular.module('ngLocalize')\r\n    .directive('i18n', function ($sce, locale, localeEvents, localeConf) {\r\n        function setText(elm, tag) {\r\n            if (tag !== elm.html()) {\r\n                elm.html($sce.getTrustedHtml(tag));\r\n            }\r\n        }\r\n\r\n        function update(elm, string, optArgs) {\r\n            if (locale.isToken(string)) {\r\n                locale.ready(locale.getPath(string)).then(function () {\r\n                    setText(elm, locale.getString(string, optArgs));\r\n                });\r\n            } else {\r\n                setText(elm, string);\r\n            }\r\n        }\r\n\r\n        return function (scope, elm, attrs) {\r\n            var hasObservers;\r\n\r\n            attrs.$observe('i18n', function (newVal, oldVal) {\r\n                if (newVal && newVal !== oldVal) {\r\n                    update(elm, newVal, hasObservers); \r\n                }\r\n            });\r\n\r\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\r\n                if (localeConf.observableAttrs.test(attr)) {\r\n                    attrs.$observe(normAttr, function (newVal) {\r\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\r\n                            hasObservers = hasObservers || {};\r\n                            hasObservers[normAttr] = attrs[normAttr];\r\n                            update(elm, attrs.i18n, hasObservers);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n        };\r\n    })\r\n    .directive('i18nAttr', function (locale, localeEvents) {\r\n        return function (scope, elem, attrs) {\r\n            var lastValues = {};\r\n\r\n            function updateText(target, attributes) {\r\n                var values = scope.$eval(attributes),\r\n                    langFiles = [],\r\n                    exp;\r\n\r\n                for(var key in values) {\r\n                    exp = values[key];\r\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\r\n                        langFiles.push(locale.getPath(exp));\r\n                    }\r\n                }\r\n\r\n                locale.ready(langFiles).then(function () {\r\n                    var value = '';\r\n\r\n                    for(var key in values) {\r\n                        exp = values[key];\r\n                        value = locale.getString(exp);\r\n                        if (lastValues[key] !== value) {\r\n                            attrs.$set(attrs.$normalize(key), lastValues[key] = value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            attrs.$observe('i18nAttr', function (newVal) {\r\n                if (newVal) {\r\n                    updateText(elem, newVal); \r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                updateText(elem, attrs.i18nAttr);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                updateText(elem, attrs.i18nAttr);\r\n            });\r\n        };\r\n    });\r\n\nangular.module('ngLocalize.Config', [])\n    .value('localeConf', {\n        basePath: 'languages',\n        defaultLocale: 'en-US',\n        sharedDictionary: 'common',\n        fileExtension: '.lang.json',\n        persistSelection: true,\n        cookieName: 'COOKIE_LOCALE_LANG',\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\n        delimiter: '::',\n        validTokens: new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$')\n    });\n\n}(this.angular, this, this.document));\r\n"],"sourceRoot":"/source/"}