{"version":3,"sources":["angular-localization.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","isToken","str","length","TOKEN_REGEX","test","getPath","tok","path","split","result","slice","join","getKey","getBundle","i","bundles","loadBundle","token","root","url","basePath","currentLocale","_loading","fileExtension","get","success","data","key","hasOwnProperty","$broadcast","resourceUpdates","deferrences","resolve","error","bundleReady","bundle","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","push","all","applySubstitutions","text","subs","res","firstOfKind","sub","replace","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","setLocale","lang","trim","isUndefined","defaultLocale","localeChanges","cookieStore","put","cookieName","getLocale","RegExp","persistSelection","has","navigator","userLanguage","language","getString","filter","locale","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","attr","normAttr","observableAttrs","i18n","$on","elem","updateText","target","attributes","exp","values","$eval","langFiles","lastValues","$set","i18nAttr","sharedDictionary","this"],"mappings":"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","file":"angular-localization.min.js","sourcesContent":["/*!\n * angular-localization :: v1.3.0 :: 2015-07-23\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2015 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\n    'use strict';\n\nangular.module('ngLocalize.Version', [])\n    .constant('localeVer', '1.3.0');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\n\nangular.module('ngLocalize.InstalledLanguages', [])\n    .value('localeSupported', [\n        'en-US'\n    ])\n    .value('localeFallbacks', {\n        'en': 'en-US'\n    });\nangular.module('ngLocalize')\n    .service('locale', ['$injector', '$http', '$q', '$log', '$rootScope', '$window', 'localeConf', 'localeEvents', 'localeSupported', 'localeFallbacks', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\n        var TOKEN_REGEX = new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$'),\n\n            currentLocale,\n            deferrences,\n            bundles,\n            cookieStore;\n\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\n            cookieStore = $injector.get('$cookieStore');\n        }\n\n        function isToken(str) {\n            return (str && str.length && TOKEN_REGEX.test(str));\n        }\n\n        function getPath(tok) {\n            var path = tok ? tok.split('.') : '',\n                result = '';\n\n            if (path.length > 1) {\n                result = path.slice(0, -1).join('.');\n            }\n\n            return result;\n        }\n\n        function getKey(tok) {\n            var path = tok ? tok.split('.') : [],\n                result = '';\n\n            if (path.length) {\n                result = path[path.length - 1];\n            }\n\n            return result;\n        }\n\n        function getBundle(tok) {\n            var result = null,\n                path = tok ? tok.split('.') : [],\n                i;\n\n            if (path.length > 1) {\n                result = bundles;\n\n                for (i = 0; i < path.length - 1; i++) {\n                    if (result[path[i]]) {\n                        result = result[path[i]];\n                    } else {\n                        result = null;\n                        break;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        function loadBundle(token) {\n            var path = token ? token.split('.') : '',\n                root = bundles,\n                url = localeConf.basePath + '/' + currentLocale,\n                i;\n\n            if (path.length > 1) {\n                for (i = 0; i < path.length - 1; i++) {\n                    if (!root[path[i]]) {\n                        root[path[i]] = {};\n                    }\n                    root = root[path[i]];\n                    url += '/' + path[i];\n                }\n\n                if (!root._loading) {\n                    root._loading = true;\n\n                    url += localeConf.fileExtension;\n\n                    $http.get(url)\n                        .success(function (data) {\n                            var key,\n                                path = getPath(token);\n                            // Merge the contents of the obtained data into the stored bundle.\n                            for (key in data) {\n                                if (data.hasOwnProperty(key)) {\n                                    root[key] = data[key];\n                                }\n                            }\n\n                            // Mark the bundle as having been \"loaded\".\n                            delete root._loading;\n\n                            // Notify anyone who cares to know about this event.\n                            $rootScope.$broadcast(localeEvents.resourceUpdates);\n\n                            // If we issued a Promise for this file, resolve it now.\n                            if (deferrences[path]) {\n                                deferrences[path].resolve(path);\n                            }\n                        })\n                        .error(function () {\n                            $log.error('[localizationService] Failed to load: ' + url);\n\n                            // We can try it again later.\n                            delete root._loading;\n                        });\n                }\n            }\n        }\n\n        function bundleReady(path) {\n            var bundle,\n                token;\n\n            path = path || localeConf.langFile;\n            token = path + '._LOOKUP_';\n\n            bundle = getBundle(token);\n\n            if (!deferrences[path]) {\n                deferrences[path] = $q.defer();\n            }\n\n            if (bundle && !bundle._loading) {\n                deferrences[path].resolve(path);\n            } else {\n                if (!bundle) {\n                    loadBundle(token);\n                }\n            }\n\n            return deferrences[path].promise;\n        }\n\n        function ready(path) {\n            var paths,\n                deferred,\n                outstanding;\n\n            if (angular.isString(path)) {\n                paths = path.split(',');\n            } else if (angular.isArray(path)) {\n                paths = path;\n            } else {\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\n            }\n\n            if (paths.length > 1) {\n                outstanding = [];\n                paths.forEach(function (path) {\n                    outstanding.push(bundleReady(path));\n                });\n                deferred = $q.all(outstanding);\n            } else {\n                deferred = bundleReady(path);\n            }\n\n            return deferred;\n        }\n\n        function applySubstitutions(text, subs) {\n            var res = text,\n                firstOfKind = 0;\n\n            if (subs) {\n                if (angular.isArray(subs)) {\n                    angular.forEach(subs, function (sub, i) {\n                        res = res.replace('%' + (i + 1), sub);\n                        res = res.replace('{' + (i + 1) + '}', sub);\n                    });\n                } else {\n                    angular.forEach(subs, function (v, k) {\n                        ++firstOfKind;\n\n                        res = res.replace('{' + k + '}', v);\n                        res = res.replace('%' + k, v);\n                        res = res.replace('%' + (firstOfKind), v);\n                        res = res.replace('{' + (firstOfKind) + '}', v);\n                    });\n                }\n            }\n            res = res.replace(/\\n/g, '<br>');\n\n            return res;\n        }\n\n        function getLocalizedString(txt, subs) {\n            var result = '',\n                bundle,\n                key,\n                A,\n                isValidToken = false;\n\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\n                A = txt.split(localeConf.delimiter);\n                txt = A[0];\n                subs = angular.fromJson(A[1]);\n            }\n\n            isValidToken = isToken(txt);\n            if (isValidToken) {\n                if (!angular.isObject(subs)) {\n                    subs = [subs];\n                }\n\n                bundle = getBundle(txt);\n                if (bundle && !bundle._loading) {\n                    key = getKey(txt);\n\n                    if (bundle[key]) {\n                        result = applySubstitutions(bundle[key], subs);\n                    } else {\n                        $log.info('[localizationService] Key not found: ' + txt);\n                        result = '%%KEY_NOT_FOUND%%';\n                    }\n                } else {\n                    if (!bundle) {\n                        loadBundle(txt);\n                    }\n                }\n            } else {\n                result = txt;\n            }\n\n            return result;\n        }\n\n        function setLocale(value) {\n            var lang;\n\n            if (angular.isString(value)) {\n                value = value.trim();\n                if (localeSupported.indexOf(value) !== -1) {\n                    lang = value;\n                } else {\n                    lang = localeFallbacks[value.split('-')[0]];\n                    if (angular.isUndefined(lang)) {\n                        lang = localeConf.defaultLocale;\n                    }\n                }\n            } else {\n                lang = localeConf.defaultLocale;\n            }\n\n            if (lang !== currentLocale) {\n                bundles = {};\n                deferrences = {};\n                currentLocale = lang;\n\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\n                $rootScope.$broadcast(localeEvents.resourceUpdates);\n\n                if (cookieStore) {\n                    cookieStore.put(localeConf.cookieName, lang);\n                }\n            }\n        }\n\n        function getLocale() {\n            return currentLocale;\n        }\n\n        setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ? cookieStore.get(localeConf.cookieName) : $window.navigator.userLanguage || $window.navigator.language);\n\n        return {\n            ready: ready,\n            isToken: isToken,\n            getPath: getPath,\n            getKey: getKey,\n            setLocale: setLocale,\n            getLocale: getLocale,\n            getString: getLocalizedString\n        };\n    }]);\n\nangular.module('ngLocalize')\n    .filter('i18n', ['locale', function (locale) {\n        var i18nFilter = function (input, args) {\n            return locale.getString(input, args);\n        };\n\n        i18nFilter.$stateful = true;\n\n        return i18nFilter;\n    }]);\n\nangular.module('ngLocalize.Events', [])\n    .constant('localeEvents', {\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\n        localeChanges: 'ngLocalizeLocaleChanged'\n    });\nangular.module('ngLocalize')\n    .directive('i18n', ['$sce', 'locale', 'localeEvents', 'localeConf', function ($sce, locale, localeEvents, localeConf) {\n        function setText(elm, tag) {\n            if (tag !== elm.html()) {\n                elm.html($sce.getTrustedHtml(tag));\n            }\n        }\n\n        function update(elm, string, optArgs) {\n            if (locale.isToken(string)) {\n                locale.ready(locale.getPath(string)).then(function () {\n                    setText(elm, locale.getString(string, optArgs));\n                });\n            } else {\n                setText(elm, string);\n            }\n        }\n\n        return function (scope, elm, attrs) {\n            var hasObservers;\n\n            attrs.$observe('i18n', function (newVal, oldVal) {\n                if (newVal && newVal !== oldVal) {\n                    update(elm, newVal, hasObservers); \n                }\n            });\n\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\n                if (localeConf.observableAttrs.test(attr)) {\n                    attrs.$observe(normAttr, function (newVal) {\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\n                            hasObservers = hasObservers || {};\n                            hasObservers[normAttr] = attrs[normAttr];\n                            update(elm, attrs.i18n, hasObservers);\n                        }\n                    });\n                }\n            });\n\n            scope.$on(localeEvents.resourceUpdates, function () {\n                update(elm, attrs.i18n, hasObservers);\n            });\n            scope.$on(localeEvents.localeChanges, function () {\n                update(elm, attrs.i18n, hasObservers);\n            });\n        };\n    }])\n    .directive('i18nAttr', ['locale', 'localeEvents', function (locale, localeEvents) {\n        return function (scope, elem, attrs) {\n            var lastValues = {};\n\n            function updateText(target, attributes) {\n                var values = scope.$eval(attributes),\n                    langFiles = [],\n                    exp;\n\n                for(var key in values) {\n                    exp = values[key];\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\n                        langFiles.push(locale.getPath(exp));\n                    }\n                }\n\n                locale.ready(langFiles).then(function () {\n                    var value = '';\n\n                    for(var key in values) {\n                        exp = values[key];\n                        value = locale.getString(exp);\n                        if (lastValues[key] !== value) {\n                            attrs.$set(key, lastValues[key] = value);\n                        }\n                    }\n                });\n            }\n\n            attrs.$observe('i18nAttr', function (newVal) {\n                if (newVal) {\n                    updateText(elem, newVal); \n                }\n            });\n\n            scope.$on(localeEvents.resourceUpdates, function () {\n                updateText(elem, attrs.i18nAttr);\n            });\n            scope.$on(localeEvents.localeChanges, function () {\n                updateText(elem, attrs.i18nAttr);\n            });\n        };\n    }]);\n\nangular.module('ngLocalize.Config', [])\n    .value('localeConf', {\n        basePath: 'languages',\n        defaultLocale: 'en-US',\n        sharedDictionary: 'common',\n        fileExtension: '.lang.json',\n        persistSelection: true,\n        cookieName: 'COOKIE_LOCALE_LANG',\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\n        delimiter: '::'\n    });\n}(this.angular, this, this.document));\n"],"sourceRoot":"/source/"}